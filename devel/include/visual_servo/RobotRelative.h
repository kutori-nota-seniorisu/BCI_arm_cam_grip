// Generated by gencpp from file visual_servo/RobotRelative.msg
// DO NOT EDIT!


#ifndef VISUAL_SERVO_MESSAGE_ROBOTRELATIVE_H
#define VISUAL_SERVO_MESSAGE_ROBOTRELATIVE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace visual_servo
{
template <class ContainerAllocator>
struct RobotRelative_
{
  typedef RobotRelative_<ContainerAllocator> Type;

  RobotRelative_()
    : header()
    , actualTCPPose()
    , targetTCPPose()
    , actualTCPSpeed()
    , targetTCPSpeed()
    , actualTCPForce()
    , actualToolAccel()
    , actualJointPosition()
    , end2base()
    , digitalInputBits(0)  {
    }
  RobotRelative_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , actualTCPPose(_alloc)
    , targetTCPPose(_alloc)
    , actualTCPSpeed(_alloc)
    , targetTCPSpeed(_alloc)
    , actualTCPForce(_alloc)
    , actualToolAccel(_alloc)
    , actualJointPosition(_alloc)
    , end2base(_alloc)
    , digitalInputBits(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _actualTCPPose_type;
  _actualTCPPose_type actualTCPPose;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _targetTCPPose_type;
  _targetTCPPose_type targetTCPPose;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _actualTCPSpeed_type;
  _actualTCPSpeed_type actualTCPSpeed;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _targetTCPSpeed_type;
  _targetTCPSpeed_type targetTCPSpeed;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _actualTCPForce_type;
  _actualTCPForce_type actualTCPForce;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _actualToolAccel_type;
  _actualToolAccel_type actualToolAccel;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _actualJointPosition_type;
  _actualJointPosition_type actualJointPosition;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _end2base_type;
  _end2base_type end2base;

   typedef int64_t _digitalInputBits_type;
  _digitalInputBits_type digitalInputBits;





  typedef boost::shared_ptr< ::visual_servo::RobotRelative_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::visual_servo::RobotRelative_<ContainerAllocator> const> ConstPtr;

}; // struct RobotRelative_

typedef ::visual_servo::RobotRelative_<std::allocator<void> > RobotRelative;

typedef boost::shared_ptr< ::visual_servo::RobotRelative > RobotRelativePtr;
typedef boost::shared_ptr< ::visual_servo::RobotRelative const> RobotRelativeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::visual_servo::RobotRelative_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::visual_servo::RobotRelative_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::visual_servo::RobotRelative_<ContainerAllocator1> & lhs, const ::visual_servo::RobotRelative_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.actualTCPPose == rhs.actualTCPPose &&
    lhs.targetTCPPose == rhs.targetTCPPose &&
    lhs.actualTCPSpeed == rhs.actualTCPSpeed &&
    lhs.targetTCPSpeed == rhs.targetTCPSpeed &&
    lhs.actualTCPForce == rhs.actualTCPForce &&
    lhs.actualToolAccel == rhs.actualToolAccel &&
    lhs.actualJointPosition == rhs.actualJointPosition &&
    lhs.end2base == rhs.end2base &&
    lhs.digitalInputBits == rhs.digitalInputBits;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::visual_servo::RobotRelative_<ContainerAllocator1> & lhs, const ::visual_servo::RobotRelative_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace visual_servo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::visual_servo::RobotRelative_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::visual_servo::RobotRelative_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::visual_servo::RobotRelative_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::visual_servo::RobotRelative_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visual_servo::RobotRelative_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visual_servo::RobotRelative_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::visual_servo::RobotRelative_<ContainerAllocator> >
{
  static const char* value()
  {
    return "43b4d3212a47865eb33311ebedb438ce";
  }

  static const char* value(const ::visual_servo::RobotRelative_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x43b4d3212a47865eULL;
  static const uint64_t static_value2 = 0xb33311ebedb438ceULL;
};

template<class ContainerAllocator>
struct DataType< ::visual_servo::RobotRelative_<ContainerAllocator> >
{
  static const char* value()
  {
    return "visual_servo/RobotRelative";
  }

  static const char* value(const ::visual_servo::RobotRelative_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::visual_servo::RobotRelative_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float64[] actualTCPPose\n"
"float64[] targetTCPPose\n"
"float64[] actualTCPSpeed\n"
"float64[] targetTCPSpeed\n"
"float64[] actualTCPForce\n"
"float64[] actualToolAccel\n"
"float64[] actualJointPosition\n"
"float64[] end2base\n"
"int64 digitalInputBits\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::visual_servo::RobotRelative_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::visual_servo::RobotRelative_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.actualTCPPose);
      stream.next(m.targetTCPPose);
      stream.next(m.actualTCPSpeed);
      stream.next(m.targetTCPSpeed);
      stream.next(m.actualTCPForce);
      stream.next(m.actualToolAccel);
      stream.next(m.actualJointPosition);
      stream.next(m.end2base);
      stream.next(m.digitalInputBits);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotRelative_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::visual_servo::RobotRelative_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::visual_servo::RobotRelative_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "actualTCPPose[]" << std::endl;
    for (size_t i = 0; i < v.actualTCPPose.size(); ++i)
    {
      s << indent << "  actualTCPPose[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.actualTCPPose[i]);
    }
    s << indent << "targetTCPPose[]" << std::endl;
    for (size_t i = 0; i < v.targetTCPPose.size(); ++i)
    {
      s << indent << "  targetTCPPose[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.targetTCPPose[i]);
    }
    s << indent << "actualTCPSpeed[]" << std::endl;
    for (size_t i = 0; i < v.actualTCPSpeed.size(); ++i)
    {
      s << indent << "  actualTCPSpeed[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.actualTCPSpeed[i]);
    }
    s << indent << "targetTCPSpeed[]" << std::endl;
    for (size_t i = 0; i < v.targetTCPSpeed.size(); ++i)
    {
      s << indent << "  targetTCPSpeed[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.targetTCPSpeed[i]);
    }
    s << indent << "actualTCPForce[]" << std::endl;
    for (size_t i = 0; i < v.actualTCPForce.size(); ++i)
    {
      s << indent << "  actualTCPForce[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.actualTCPForce[i]);
    }
    s << indent << "actualToolAccel[]" << std::endl;
    for (size_t i = 0; i < v.actualToolAccel.size(); ++i)
    {
      s << indent << "  actualToolAccel[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.actualToolAccel[i]);
    }
    s << indent << "actualJointPosition[]" << std::endl;
    for (size_t i = 0; i < v.actualJointPosition.size(); ++i)
    {
      s << indent << "  actualJointPosition[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.actualJointPosition[i]);
    }
    s << indent << "end2base[]" << std::endl;
    for (size_t i = 0; i < v.end2base.size(); ++i)
    {
      s << indent << "  end2base[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.end2base[i]);
    }
    s << indent << "digitalInputBits: ";
    Printer<int64_t>::stream(s, indent + "  ", v.digitalInputBits);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISUAL_SERVO_MESSAGE_ROBOTRELATIVE_H
